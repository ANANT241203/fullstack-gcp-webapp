## ✅ Consolidated Instructions – Fullstack GCP Web App

### 🎯 Objective

Build a full-stack web app with:

* JWT & Google OAuth login
* File uploads (local & GCS)
* Real-time WebSocket updates
* OpenAPI + tRPC integration
* SDK generation
* Frontend with React, Vite, shadcn/ui

---

### 🛠 Tech Stack

**Frontend:**

* React + Vite + shadcn/ui
* OpenAPI-generated SDK
* WebSocket client

**Backend:**

* NestJS
* JWT auth & Google OAuth
* Multer for uploads
* OpenAPI (Swagger)
* tRPC (partial use)
* Google Cloud SDK (Storage + optional Secret Manager)

---

### 📁 Project Structure

```
fullstack-gcp-webapp/
├── frontend/       # React app
│   └── src/sdk/    # OpenAPI SDK
├── project1/       # NestJS backend
│   ├── auth/       # Auth logic
│   ├── uploads/    # Local file storage
│   └── scripts/    # Bash test scripts
└── instructions/   # Docs
```

---

### 🔐 Authentication

**Username/Password (JSON-based)**

* `users.json` holds hardcoded users
* Validates on `/auth/login`
* Returns JWT

**Google OAuth 2.0 (Free & Optional)**

* Use created `client_id` and `client_secret`
* Auth flow: Login → redirect → `/auth/google/callback` → token → JWT
* No billing needed

---

### 📦 File Upload

**Local Upload**

* Uses Multer
* Stores files in `uploads/`
* Protected by JWT

**Google Cloud Storage Upload (Optional)**

* Uses `@google-cloud/storage`
* Can be stubbed (no billing required for stub)
* Graceful fallback to local if GCS not configured

---

### 🔄 Real-Time WebSockets

* When file is uploaded, backend emits event via `file-events.gateway.ts`
* Frontend shows upload status in real-time using WebSocket

---

### 🧪 Testing (Backend)

From `project1/`:

```sh
# Login test
bash scripts/test-login.sh

# Protected route access
bash scripts/login-and-access-protected.sh

# Upload test
bash scripts/upload-file.sh path/to/file.txt
```

---

### 🧠 Optional GCP Setup (skip if not using billing)

Enable these (once billing is available):

* Cloud Storage API
* Secret Manager API
* OAuth 2.0 API

Create:

* OAuth credentials (done ✅)
* GCS bucket
* Service account (download JSON)

---

### 📲 Frontend Functionality

* Login with JWT or Google
* Drag-and-drop file upload
* File list with download links
* Upload status updates (real-time via WebSocket)

---

### 🧪 Frontend Setup

```sh
cd frontend
yarn install
yarn dev
```

---

### 🚀 Backend Setup

```sh
cd project1
yarn install
yarn start:dev
```

If using `.env`:

```env
JWT_SECRET=your_jwt_key
GOOGLE_CLIENT_ID=your_id
GOOGLE_CLIENT_SECRET=your_secret
GCS_BUCKET_NAME=optional
GOOGLE_APPLICATION_CREDENTIALS=optional_path_to_json
```


